"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const language_core_1 = require("@volar/language-core");
const typescript_1 = require("@volar/typescript");
const semver = __importStar(require("semver"));
const language_js_1 = require("./language.js");
const externalFiles = new WeakMap();
const init = (modules) => {
    const { typescript: ts } = modules;
    const pluginModule = {
        create(info) {
            const virtualFiles = (0, language_core_1.createVirtualFiles)([(0, language_js_1.getLanguageModule)(ts)]);
            (0, typescript_1.decorateLanguageService)(virtualFiles, info.languageService, true);
            (0, typescript_1.decorateLanguageServiceHost)(virtualFiles, info.languageServiceHost, ts, ['.astro']);
            if (semver.lt(ts.version, '5.3.0')) {
                // HACK: AutoImportProviderProject's script kind does not match the one of the language service host here
                // this causes TypeScript to throw and crash. So, we'll fake being a TS file here for now until they fix it
                // Fixed by https://github.com/microsoft/TypeScript/pull/55716
                const getScriptKind = info.languageServiceHost.getScriptKind?.bind(info.languageServiceHost.getScriptKind);
                if (getScriptKind) {
                    info.languageServiceHost.getScriptKind = (fileName) => {
                        if (fileName.endsWith('.astro')) {
                            return ts.ScriptKind.TS;
                        }
                        return getScriptKind(fileName);
                    };
                }
            }
            return info.languageService;
        },
        getExternalFiles(project, updateLevel = 0) {
            if (
            // @ts-expect-error wait for TS 5.3
            updateLevel >= (1) ||
                !externalFiles.has(project)) {
                const oldFiles = externalFiles.get(project);
                const newFiles = (0, typescript_1.searchExternalFiles)(ts, project, ['.astro']);
                externalFiles.set(project, newFiles);
                if (oldFiles && !arrayItemsEqual(oldFiles, newFiles)) {
                    project.refreshDiagnostics();
                }
            }
            return externalFiles.get(project);
        },
    };
    return pluginModule;
};
function arrayItemsEqual(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    const set = new Set(a);
    for (const file of b) {
        if (!set.has(file)) {
            return false;
        }
    }
    return true;
}
module.exports = init;
